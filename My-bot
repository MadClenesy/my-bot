from telegram import (
    Bot, Update, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, ParseMode
)
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    CallbackQueryHandler, PreCheckoutQueryHandler, CallbackContext
)


TOKEN = "7583697893:AAHpDzwKtpuNarQzowb2bsyuaiFvtnO67V8"
ADMIN_ID = 361835441
PROVIDER_TOKEN = "381764678:TEST:12345"  


def start(update: Update, context: CallbackContext):

    keyboard = [
        [KeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton("üì¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ì–∞–≤–∞–Ω—å¬ª.\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ:\n"
        "üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "ü§ù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ\n"
        "üí¨ –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–µ–∫—Ç–µ",
        reply_markup=markup
    )

    contact_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–∞–±–ª–∏–∫", url="https://t.me/gavancinema")],
        [InlineKeyboardButton("VK", url="https://vk.com/di.rexx")],
        [InlineKeyboardButton("Instagram", url="https://instagram.com/di.rexx")]
    ])
    update.message.reply_text("üìû –ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–æ—Ü—Å–µ—Ç–∏:", reply_markup=contact_markup)


def subscription(update: Update, context: CallbackContext):
    buttons = [
        [InlineKeyboardButton("Free ‚Äî 0 ‚ÇΩ", callback_data="free")],
        [InlineKeyboardButton("Light / –ë–∞–∑–∞ ‚Äî 690 ‚ÇΩ", callback_data="light")],
        [InlineKeyboardButton("Pro / –°–æ–æ–±—â–µ—Å—Ç–≤–æ+ ‚Äî 1990 ‚ÇΩ", callback_data="pro")],
        [InlineKeyboardButton("Producer / –ü—Ä–æ—Ñ–∏ ‚Äî 5900 ‚ÇΩ", callback_data="producer")],
        [InlineKeyboardButton("Full Prod / –ü–æ–¥ –∫–ª—é—á ‚Äî 25000 ‚ÇΩ", callback_data="full")]
    ]
    markup = InlineKeyboardMarkup(buttons)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        "Free ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: –∫–µ–π—Å—ã, –±–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —á–∞—Å—Ç–∏—á–Ω–æ, 1 –∑–∞—è–≤–∫–∞/–º–µ—Å\n"
        "Light ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —á–∞—Ç, 1 –∑–∞–ø—Ä–æ—Å/–º–µ—Å\n"
        "Pro ‚Äî –≤—Å—ë –∏–∑ Light + –≤—Å—Ç—Ä–µ—á–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
        "Producer ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, —Å–≤—è–∑–∏, —É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "Full Prod ‚Äî –ø–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ, 24/7 –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n",
        reply_markup=markup
    )


def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    level = query.data

    prices = {
        "light": 690,
        "pro": 1990,
        "producer": 5900,
        "full": 25000
    }

    if level == "free":
        query.edit_message_text("‚úÖ Free-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏!")
    elif level in prices:
        query.bot.send_invoice(
            chat_id=query.message.chat.id,
            title=f"–ü–æ–¥–ø–∏—Å–∫–∞ {level.capitalize()}",
            description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Å–ª—É–≥–∏ –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ì–∞–≤–∞–Ω—å¬ª",
            payload=f"subscription_{level}",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=[LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞", prices[level] * 100)]
        )


def precheckout(update: Update, context: CallbackContext):
    query = update.pre_checkout_query
    if query.invoice_payload.startswith("subscription_"):
        query.answer(ok=True)
    else:
        query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def successful_payment(update: Update, context: CallbackContext):
    payment = update.message.successful_payment
    level = payment.invoice_payload.replace("subscription_", "")
    update.message.reply_text(
        f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n–ü–æ–¥–ø–∏—Å–∫–∞ *{level.capitalize()}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ",
        parse_mode=ParseMode.MARKDOWN
    )
    context.bot.send_message(
        ADMIN_ID,
        f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂!\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.message.from_user.username}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {level}\n"
        f"–°—É–º–º–∞: {payment.total_amount / 100} {payment.currency}"
    )


def support(update: Update, context: CallbackContext):
    update.message.reply_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –∫–æ–º–∞–Ω–¥–∞ ¬´–ì–∞–≤–∞–Ω–∏¬ª –æ—Ç–≤–µ—Ç–∏—Ç –≤—Ä—É—á–Ω—É—é üí¨")


def about(update: Update, context: CallbackContext):
    update.message.reply_text(
        "¬´–ì–∞–≤–∞–Ω—å¬ª ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n"
        "–ú—ã –ø–æ–º–æ–≥–∞–µ–º –∏–¥–µ—è–º –≤–æ–ø–ª–æ—â–∞—Ç—å—Å—è: —Å–æ–µ–¥–∏–Ω—è–µ–º –ª—é–¥–µ–π, —Ä–µ—Å—É—Ä—Å—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ üåä"
    )


def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex("üíé –ü–æ–¥–ø–∏—Å–∫–∞"), subscription))
    dp.add_handler(MessageHandler(Filters.regex("üì¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), support))
    dp.add_handler(MessageHandler(Filters.regex("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"), about))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(PreCheckoutQueryHandler(precheckout))
    dp.add_handler(MessageHandler(Filters.successful_payment, successful_payment))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
